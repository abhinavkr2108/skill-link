// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Course {
  id          String       @id @default(uuid()) @map("_id")
  userId      String
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean      @default(false)
  categoryId  String?
  attachments Attachment[]
  category    Category?    @relation(fields: [categoryId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  chapters  Chapter[]

  @@index([categoryId])
  @@map("courses")
}

model Attachment {
  id        String    @id @default(uuid()) @map("_id")
  name      String
  url       String
  courseId  String?
  course    Course?   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  chapters  Chapter[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  @@index([courseId])
  @@map("attachments")
}

model Category {
  id      String   @id @default(uuid()) @map("_id")
  name    String   @unique
  courses Course[]

  @@map("category")
}

model Chapter {
  id           String         @id @default(uuid()) @map("_id")
  title        String
  description  String?
  video        String?
  position     Int
  isPublished  Boolean        @default(false)
  muxData      MuxData?
  courseID     String
  course       Course         @relation(fields: [courseID], references: [id], onDelete: Cascade)
  userProgress UserProgress[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  Attachment   Attachment?    @relation(fields: [attachmentId], references: [id])
  attachmentId String?
  muxDataId    String?
}

model MuxData {
  id         String  @id @default(uuid()) @map("_id")
  chapterId  String  @unique
  assetId    String
  playbackId String
  chapter    Chapter @relation(fields: [chapterId], references: [id])
}

model UserProgress {
  id          String   @id @default(uuid()) @map("_id")
  userId      String
  chapterId   String
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@unique([userId, chapterId])
  @@index([chapterId])
}
